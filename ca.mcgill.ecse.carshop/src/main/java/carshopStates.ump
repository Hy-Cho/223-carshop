class Appointment{
  States{
    Booking{
    
      UpdateAppointment [moreThan1DayRemaining() && isInBusinessHour(newTimes) && !isHoliday(newTimes) && !isVacation(newTimes) && checkAvailableSlot(newTimes)] 
      /{ updateAppointment(realName,optionalName,date,startTimes) } -> Booking;
      
      No_Show [cur_time >= end_time] /{ delete(); customer.incrNoShow();} -> Final;
      
      CancelAppointment [moreThan1DayRemaining()] /{Appointment.delete();} -> Final;
      
      Start [Start_time <= cur_time && isCustomerHere()]-> AppointmentInProgress;
    }
    AppointmentInProgress{
      End [cur_time == end_time] /{Appointment.delete();} -> Final;
      
      UpdateServiceCombo [technicianIsAvailable() && isInBusinessHour(newTimes) && isHoliday(newTimes) && !isVacation(newTimes) && checkAvailableSlot(newTimes)] 
      /{ delete(); updateCombo(newCombo); makeAppointmentCombo(realName,date,startTimes);} -> AppointmentInProgress;
    }
  }
  
  private updateAppointment(realName,optionalName,date,startTimes){
  	delete();
  	if(bookableService instanceof ServiceCombo){
      	makeAppointmentCombo(realName,optionalName,date,startTimes);
     }
    else{
	   	makeAppointmentService(realName,date,startTimes);
    }
  }
}