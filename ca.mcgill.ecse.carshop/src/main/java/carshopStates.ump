class Appointment{
  States{
    Booking{
    
      UpdateAppointment [moreThan1DayRemaining() && isInBusinessHour(newTimes) && !isHoliday(newTimes) && !isVacation(newTimes) && checkAvailableSlot(newTimes)] 
      /{ updateAppointment(realName,optionalName,date,startTimes); } -> Booking;
      
      No_Show [(getCurTimes().after(getEndTimes()) || getCurTimes().equals(getEndTimes()))] /{ delete(); customer.incrNoShow();} -> Final;
      
      CancelAppointment [moreThan1DayRemaining()] /{delete();} -> Final;
      
      Start [(getStartTimes().before(getCurTimes()) || getStartTimes().equals(getCurTimes()))]-> AppointmentInProgress;
    }
    AppointmentInProgress{
      End [getCurTimes().equals(getEndTimes())] /{ delete();} -> Final;
      
      UpdateServiceCombo [technicianIsAvailable() && isInBusinessHour(newTimes) && isHoliday(newTimes) && !isVacation(newTimes) && checkAvailableSlot(newTimes)] 
      /{ delete(); updateCombo(newCombo); CarShopController.makeAppointmentCombo(realName,date,startTimes);} -> AppointmentInProgress;
    }
  }
  
  private void updateAppointment(realName,optionalName,date,startTimes){
  	delete();
  	if(bookableService instanceof ServiceCombo){
      	CarShopController.makeAppointmentCombo(realName,optionalName,date,startTimes);
     }
    else{
	   	CarShopController.makeAppointmentService(realName,date,startTimes);
    }
  }
  
  private Time getStartTimes(){
  
  	ServiceBooking firstBooking = this.getServiceBookings().get(0);
	return firstBooking.getTimeSlot().getStartTime();
  
  }
  
  private Time getEndTimes(){
  
  	int length = this.getServiceBookings().size();
	ServiceBooking lastBooking = this.getServiceBookings().get(length-1);
	return lastBooking.getTimeSlot().getEndTime();
  
  }
  
  private Time getCurTimes(){
  	return CarShopController.getCurrentTimes();
  }
}